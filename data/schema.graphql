input ChangePasswordInput {
  oldPassword: String!

  # user new password
  password: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  error: String
  me: User
  clientMutationId: String
}

# Represents Form
type Form implements Node {
  # The ID of an object
  id: ID!
  age: Int
  gender: String
  work: String
  neighborhood: String
  home: String
  havePoliticalParty: Boolean
  politicalParty: String
  question1: String
  question2: String
  question3: String
  question4: String
  question5: String
  question6: String
  question7: String
  question8: String
  question9: String
  question10: String
  createdAt: String
  updatedAt: String
}

input FormAddInput {
  age: Int
  gender: String
  work: String
  neighborhood: String
  home: String
  havePoliticalParty: Boolean
  politicalParty: String
  question1: String
  question2: String
  question3: String
  question4: String
  question5: String
  question6: String
  question7: String
  question8: String
  question9: String
  question10: String
  clientMutationId: String
}

type FormAddPayload {
  formEdge: FormEdge
  viewer: Viewer
  error: String
  clientMutationId: String
}

# A connection to a list of items.
type FormConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FormEdge]

  # Total number of count
  count: Int
}

# An edge in a connection.
type FormEdge {
  # The item at the end of the edge
  node: Form

  # A cursor for use in pagination
  cursor: String!
}

input FormEditInput {
  id: ID!
  age: Int
  gender: String
  work: String
  neighborhood: String
  home: String
  havePoliticalParty: Boolean
  politicalParty: String
  question1: String
  question2: String
  question3: String
  question4: String
  question5: String
  question6: String
  question7: String
  question8: String
  question9: String
  question10: String
  clientMutationId: String
}

type FormEditPayload {
  form: Form
  error: String
  clientMutationId: String
}

input LoginEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

type Mutation {
  LoginEmail(input: LoginEmailInput!): LoginEmailPayload
  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload
  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload
  FormAdd(input: FormAddInput!): FormAddPayload
  FormEdit(input: FormEditInput!): FormEditPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# The root of all... queries
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

input RegisterEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

# User data
type User implements Node {
  # The ID of an object
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  count: Int
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

# ...
type Viewer implements Node {
  # The ID of an object
  id: ID!
  me: User
  user(id: ID!): User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  form(id: ID!): Form
  forms(after: String, first: Int, before: String, last: Int, search: String): FormConnection
}
